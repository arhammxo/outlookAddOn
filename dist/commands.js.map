{"version":3,"file":"commands.js","mappings":"AAIAA,OAAOC,WAAa,WAAY,EAsIhCD,OAAOE,QAAQC,UAAU,qBA3HzB,SAA2BC,GAIvB,IACIC,EAAEC,KAAK,CACHC,IAJE,uDAKFC,SAAU,SACXC,MAAK,SAASC,GAuBb,MArBU,SACA,SACA,yBACA,yEACA,0DACA,UACA,SACA,gCACA,eACA,QACA,UACA,UAOVV,OAAOW,QAAQC,QAAQC,KAAKC,KAAKC,qBAPjCC,0PAO0D,CAAEC,aAAcjB,OAAOkB,aAAaC,OAAQ,SAASC,GAC3GhB,EAAMiB,WACV,IACOC,SAEX,IAAGC,MAAK,SAASC,GACb,IAAMC,EAAMC,KAAKC,UAAUH,GAI3B,OAHAxB,OAAOW,QAAQC,QAAQC,KAAKC,KAAKC,qBAAqB,YAAcU,EAAK,CAAER,aAAcjB,OAAOkB,aAAaC,OAAQ,SAASC,GAC1HhB,EAAMiB,WACV,IACOO,UAAUC,SAASL,EAC9B,GACJ,CAAE,MAAOM,GACL,IAAMC,EAAKL,KAAKC,UAAUG,GAC1B9B,OAAOW,QAAQC,QAAQC,KAAKC,KAAKC,qBAAqB,QAAUgB,EAAI,CAAEd,aAAcjB,OAAOkB,aAAaC,OAAQ,SAASC,GACrHhB,EAAMiB,WACV,GACJ,CA2EJ","sources":["webpack://office-addin-taskpane-js/./src/commands/commands.js"],"sourcesContent":["let config;\nlet btnEvent;\n\n// The initialize function must be run each time a new page is loaded.\nOffice.initialize = function() {};\n\nfunction showError(error) {\n    Office.context.mailbox.item.notificationMessages.replaceAsync('github-error', {\n        type: 'errorMessage',\n        message: error\n    }, function(result) {});\n}\n\nlet settingsDialog;\n\nfunction insertDefaultGist(event) {\n    // const u = 'https://api.github.com/users/arhammxo';\n    const u = 'https://arhammxo.github.io/jsonDem/meetingspace.json';\n    // const u = 'http://52.66.254.76:8891/meetingspace';\n    try {\n        $.ajax({\n            url: u,\n            dataType: 'json'\n        }).done(function(gist) {\n            let cB = '<!doctype html>';\n            cB = cB + '<html>';\n            cB = cB + '<head>';\n            cB = cB + '<meta charset=\"UTF-8\">';\n            cB = cB + '<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">';\n            cB = cB + '<link href=\"../taskpane/taskpane.css\" rel=\"stylesheet\">';\n            cB = cB + '</head>';\n            cB = cB + '<body>';\n            cB = cB + '<h1 class=\"text-l font-bold\">';\n            cB = cB + 'Hello world!';\n            cB = cB + '</h1>';\n            cB = cB + '</body>'\n            cB = cB + '</html>';\n            // let cB = '<pre><code>';\n            // for (i = 0; i < gist.length; i++) {\n            //     cB = cB + gist[i].name;\n            //     cB = cB + \"<br></br>\";\n            // }\n            // cB = cB + '</code></pre>';\n            Office.context.mailbox.item.body.setSelectedDataAsync(cB, { coercionType: Office.CoercionType.Html }, function(result) {\n                event.completed();\n            });\n            return codeBlock;\n\n        }).fail(function(error) {\n            const sks = JSON.stringify(error);\n            Office.context.mailbox.item.body.setSelectedDataAsync(\"diff err \" + sks, { coercionType: Office.CoercionType.Html }, function(result) {\n                event.completed();\n            });\n            return converter.makeHtml(error);\n        });\n    } catch (e) {\n        const sk = JSON.stringify(e);\n        Office.context.mailbox.item.body.setSelectedDataAsync(\"erroe\" + sk, { coercionType: Office.CoercionType.Html }, function(result) {\n            event.completed();\n        });\n    }\n\n\n\n\n    // try {\n    //     const z = extr();\n    //     Office.context.mailbox.item.body.setSelectedDataAsync(z, { coercionType: Office.CoercionType.Html }, function(result) {\n    //         event.completed();\n    //     });\n    // } catch (e) {\n    //     const sk = JSON.stringify(e);\n    //     Office.context.mailbox.item.body.setSelectedDataAsync(\"erroe\" + sk, { coercionType: Office.CoercionType.Html }, function(result) {\n    //         event.completed();\n    //     });\n    // }\n\n\n    // $.ajax({\n    //     url: endpoint,\n    //     data: JSON.stringify({'1':'2'}),\n    //     // headers: {'X-Requested-With': 'XMLHttpRequest'},\n    //     contentType: 'text/plain',\n    //     type: 'POST',\n    //     dataType: 'json',\n    //     error: function(xhr, status, error) {\n    //         // error\n    //       }\n    // }).done(function(data) {\n    //     // done\n    //   });\n\n    // config = getConfig();\n    // dat = JSON.stringify('/default/meeting.json');\n\n    // // Check if the add-in has been configured.\n    // if (config && config.defaultGistId) {\n    //     // Get the default gist content and insert.\n    //     try {\n    //         getGist(config.defaultGistId, function(gist, error) {\n    //             if (gist) {\n    //                 buildBodyContent(gist, function(content, error) {\n    //                     if (content) {\n    //                         Office.context.mailbox.item.body.setSelectedDataAsync(dat, { coercionType: Office.CoercionType.Html }, function(result) {\n    //                             event.completed();\n    //                         });\n    //                     } else {\n    //                         showError(error);\n    //                         event.completed();\n    //                     }\n    //                 });\n    //             } else {\n    //                 showError(error);\n    //                 event.completed();\n    //             }\n    //         });\n    //     } catch (err) {\n    //         showError(err);\n    //         event.completed();\n    //     }\n\n    // } else {\n    //     // Save the event object so we can finish up later.\n    //     btnEvent = event;\n    //     // Not configured yet, display settings dialog with\n    //     // warn=1 to display warning.\n    //     const url = new URI('dialog.html?warn=1').absoluteTo(window.location).toString();\n    //     const dialogOptions = { width: 20, height: 40, displayInIframe: true };\n\n    //     Office.context.ui.displayDialogAsync(url, dialogOptions, function(result) {\n    //         settingsDialog = result.value;\n    //         settingsDialog.addEventHandler(Office.EventType.DialogMessageReceived, receiveMessage);\n    //         settingsDialog.addEventHandler(Office.EventType.DialogEventReceived, dialogClosed);\n    //     });\n    // }\n}\n\n// Register the function.\nOffice.actions.associate(\"insertDefaultGist\", insertDefaultGist);\n\nfunction receiveMessage(message) {\n    config = JSON.parse(message.message);\n    setConfig(config, function(result) {\n        settingsDialog.close();\n        settingsDialog = null;\n        btnEvent.completed();\n        btnEvent = null;\n    });\n}\n\nfunction dialogClosed(message) {\n    settingsDialog = null;\n    btnEvent.completed();\n    btnEvent = null;\n}"],"names":["Office","initialize","actions","associate","event","$","ajax","url","dataType","done","gist","context","mailbox","item","body","setSelectedDataAsync","cB","coercionType","CoercionType","Html","result","completed","codeBlock","fail","error","sks","JSON","stringify","converter","makeHtml","e","sk"],"sourceRoot":""}